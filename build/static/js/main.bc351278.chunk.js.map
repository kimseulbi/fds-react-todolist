{"version":3,"sources":["api.js","LoginForm.js","TodoList.js","index.js"],"names":["api","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","LoginForm","e","preventDefault","username","target","elements","value","password","post","res","setItem","data","this","props","onLogin","_this","react_default","a","createElement","onSubmit","handleSubmit","type","name","Component","TodoList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","todos","loading","setState","get","body","complete","id","delete","removeItem","onLogout","_this2","divClass","classNames","className","onClick","handleLogout","map","todo","key","handleDelete","React","App","poprs","page","LoginForm_LoginForm","handleLogin","TodoList_TodoList","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.bc351278.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// axios내 서버 주소 등록\nconst api = axios.create({\n  baseURL: \"https://unequaled-suit.glitch.me/\"\n});\n\n// Axios Interceptor - 그때그때 다른 설정 사용하기\n// axios에는 매번 요청이 일어나기 직전에 **설정 객체를 가로채서** 원하는대로 편집할 수 있는 기능이 있습니다.\napi.interceptors.request.use(function (config) {\n  // localStorage에 token이 있으면 요청에 헤더 설정, 없으면 아무것도 하지 않음\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers[\"Authorization\"] = \"Bearer \" + token;\n  }\n  return config;\n});\n\nexport default api;\n","import React, { Component } from \"react\";\n\nimport api from \"./api\";\n\n// 폼 submit 이벤트가 일어났을 때\n// username, password를 얻어온 후\n// 서버에 전송하고 토큰을 받아와서 localStorage에 저장\n// 한 뒤에 할일 목록을 보여주기\n\nexport default class LoginForm extends Component {\n  async handleSubmit(e) {\n    e.preventDefault();\n    // e: 이벤트 객체\n    // e.target: 이벤트를 실제로 일으킨 요소 객체 (여기서는 loginFormEl)\n    // e.target.elements: 폼 내부에 들어있는 요소 객체를 편하게 가져올 수 있는 특이한 객체\n    // e.target.elements.username: name 어트리뷰트에 username이라고 지정되어있는 input 요소 객체\n    // .value: 사용자가 input 태그에 입력한 값\n    const username = e.target.elements.username.value;\n    const password = e.target.elements.password.value;\n    const res = await api.post(\"/users/login\", {\n      username,\n      password\n    })\n    localStorage.setItem(\"token\",res.data.token);\n    this.props.onLogin();\n  }\n  render() {\n    return (\n      <form onSubmit={e => this.handleSubmit(e)}>\n        <input type=\"text\" name=\"username\" />\n        <input type=\"password\" name=\"password\" />\n        <button>전송</button>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport api from \"./api\";\nimport classNames from \"classnames\";\n\nexport default class TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      loading: false\n    };\n  }\n\n  // componentDidMount: 컴포넌트 출력이 DOM에 렌더링된 이후 동작, 컴포넌트 생성후, 최초로 렌더링\n  // 할일 목록 처음불러올때\n  async componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    // 서버에서 할 일 목록 받아오기\n    const res = await api.get(\"/todos\");\n    const todos = res.data;\n    // 받아온 후 상태\n    this.setState({\n      todos: todos,\n      loading: false\n    });\n  }\n  // 추가 버튼\n  async handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      loading: true\n    });\n    // 서버에 새 할 일 전송\n    const body = e.target.elements.body.value;\n    await api.post(\"/todos\", {\n      body,\n      complete: false\n    });\n    // 서버에서 할 일 목록 다시 받아오기\n    const res = await api.get(\"/todos\");\n    // 할 일 목록을 화면에 그려주기\n    const todos = res.data;\n    this.setState({\n      todos: todos,\n      loading: false\n    });\n  }\n  // 삭제버튼\n  async handleDelete(e, id) {\n    this.setState({\n      loading: true\n    });\n    // 사바에 할 일 삭제\n    await api.delete(\"/todos/\" + id);\n    // 서버에서 할 일 목록 다시 받아오기\n    const res = await api.get(\"/todos\");\n    // 할 일 목록을 화면에 그려주기\n    const todos = res.data;\n    this.setState({\n      todos: todos,\n      loading: false\n    });\n  }\n  // 로그아웃 버튼\n  async handleLogout(e) {\n    e.preventDefault();\n    this.setState({\n      loading:true\n    })\n    localStorage.removeItem(\"token\");\n    this.props.onLogout();\n  }\n\n  render() {\n    const divClass = classNames({\n      loading: this.state.loading\n    });\n    return (\n      <div className={divClass}>\n        <h1>할 일 목록</h1>\n        <button onClick={e => this.handleLogout(e)}>로그아웃</button>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          <input type=\"text\" name=\"body\" />\n          <button>추가</button>\n        </form>\n        <ul>\n          {this.state.todos.map(todo => (\n            <li key={todo.id}>\n              {todo.body}\n              <button onClick={e => this.handleDelete(e, todo.id)}>삭제</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport LoginForm from \"./LoginForm\";\nimport TodoList from \"./TodoList\";\n\nimport \"./styles.css\";\n\nclass App extends React.Component {\n  // 상태 설계\n  constructor(poprs) {\n    super(poprs);\n    this.state = {page: localStorage.getItem(\"token\") ? \"todo-list\" : \"login\"};\n  }\n\n  handleLogin() {\n    this.setState({\n      page: \"todo-list\"\n    })\n  }\n\n  handleLogout() {\n    this.setState({\n      page:\"login\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      {this.state.page === \"login\" ? (\n        <LoginForm onLogin={()=>this.handleLogin()} />\n        ) : this.state.page === \"todo-list\" ? (\n          <TodoList onLogout={()=>this.handleLogout()} />\n        ): null}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}